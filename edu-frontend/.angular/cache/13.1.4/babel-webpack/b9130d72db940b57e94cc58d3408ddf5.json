{"ast":null,"code":"import _asyncToGenerator from \"E:\\\\Erantha\\\\Workspaces - Tech\\\\Keycloak\\\\keycloak-edu\\\\edu-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AppAuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n    this.shouldHaveAllRoles = true;\n  }\n\n  isAccessAllowed(route, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // this.shouldHaveAllRoles = route.data['shouldHaveAllRoles'] != null ? route.data['shouldHaveAllRoles'] : true\n      // Force the user to log in if currently unauthenticated.\n      if (!_this.authenticated) {\n        // this.router.navigateByUrl(\"login\");\n        // return false;\n        yield _this.keycloak.login({\n          redirectUri: window.location.origin + state.url\n        });\n      }\n\n      return true; // Get the roles required from the route.\n      // const requiredRoles = route.data['roles'];\n      // Allow the user to to proceed if no additional roles are required to access the route.\n      // if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n      //   return true;\n      // }\n      // // Allow the user to proceed if all the required roles are present.\n      // if (this.shouldHaveAllRoles && (requiredRoles.every((role) => this.roles.includes(role)))) {\n      //   return true\n      // }\n      // else if (!this.shouldHaveAllRoles && (requiredRoles.some((role) => this.roles.includes(role)))) {\n      //   return true\n      // }\n      // else {\n      //   this.router.navigateByUrl(\"error\")\n      //   return false\n      // }\n    })();\n  }\n\n}\n\nAppAuthGuard.ɵfac = function AppAuthGuard_Factory(t) {\n  return new (t || AppAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n};\n\nAppAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AppAuthGuard,\n  factory: AppAuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:/Erantha/Workspaces - Tech/Keycloak/keycloak-edu/edu-frontend/src/app/utils/keycloak/app.authguard.ts"],"names":["KeycloakAuthGuard","i0","i1","i2","AppAuthGuard","constructor","router","keycloak","shouldHaveAllRoles","isAccessAllowed","route","state","authenticated","login","redirectUri","window","location","origin","url","ɵfac","AppAuthGuard_Factory","t","ɵɵinject","Router","KeycloakService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,iBAAT,QAAkC,kBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,MAAMC,YAAN,SAA2BJ,iBAA3B,CAA6C;AAChDK,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC1B,UAAMD,MAAN,EAAcC,QAAd;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACH;;AACKC,EAAAA,eAAe,CAACC,KAAD,EAAQC,KAAR,EAAe;AAAA;;AAAA;AAChC;AACA;AACA,UAAI,CAAC,KAAI,CAACC,aAAV,EAAyB;AACrB;AACA;AACA,cAAM,KAAI,CAACL,QAAL,CAAcM,KAAd,CAAoB;AACtBC,UAAAA,WAAW,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBN,KAAK,CAACO;AADtB,SAApB,CAAN;AAGH;;AACD,aAAO,IAAP,CAVgC,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BgC;AA4BnC;;AAnC+C;;AAqCpDd,YAAY,CAACe,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,YAAV,EAAwBH,EAAE,CAACqB,QAAH,CAAYpB,EAAE,CAACqB,MAAf,CAAxB,EAAgDtB,EAAE,CAACqB,QAAH,CAAYnB,EAAE,CAACqB,eAAf,CAAhD,CAAP;AAA0F,CAAjJ;;AACApB,YAAY,CAACqB,KAAb,GAAqB,aAAcxB,EAAE,CAACyB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,YAAT;AAAuBwB,EAAAA,OAAO,EAAExB,YAAY,CAACe,IAA7C;AAAmDU,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { KeycloakAuthGuard } from 'keycloak-angular';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"keycloak-angular\";\r\nexport class AppAuthGuard extends KeycloakAuthGuard {\r\n    constructor(router, keycloak) {\r\n        super(router, keycloak);\r\n        this.router = router;\r\n        this.keycloak = keycloak;\r\n        this.shouldHaveAllRoles = true;\r\n    }\r\n    async isAccessAllowed(route, state) {\r\n        // this.shouldHaveAllRoles = route.data['shouldHaveAllRoles'] != null ? route.data['shouldHaveAllRoles'] : true\r\n        // Force the user to log in if currently unauthenticated.\r\n        if (!this.authenticated) {\r\n            // this.router.navigateByUrl(\"login\");\r\n            // return false;\r\n            await this.keycloak.login({\r\n                redirectUri: window.location.origin + state.url\r\n            });\r\n        }\r\n        return true;\r\n        // Get the roles required from the route.\r\n        // const requiredRoles = route.data['roles'];\r\n        // Allow the user to to proceed if no additional roles are required to access the route.\r\n        // if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\r\n        //   return true;\r\n        // }\r\n        // // Allow the user to proceed if all the required roles are present.\r\n        // if (this.shouldHaveAllRoles && (requiredRoles.every((role) => this.roles.includes(role)))) {\r\n        //   return true\r\n        // }\r\n        // else if (!this.shouldHaveAllRoles && (requiredRoles.some((role) => this.roles.includes(role)))) {\r\n        //   return true\r\n        // }\r\n        // else {\r\n        //   this.router.navigateByUrl(\"error\")\r\n        //   return false\r\n        // }\r\n    }\r\n}\r\nAppAuthGuard.ɵfac = function AppAuthGuard_Factory(t) { return new (t || AppAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService)); };\r\nAppAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AppAuthGuard, factory: AppAuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}